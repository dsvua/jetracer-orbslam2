[{"/home/serhiy/github/jetracer-orbslam2/CarDriver/src/index.js":"1","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/App.js":"2","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/reportWebVitals.js":"3","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/components/connection.jsx":"4","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/message/index.js":"5","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/network/index.js":"6","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/message/parseMessage.js":"7","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/network/selectors.js":"8","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/network/atoms.js":"9","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/hooks/useWebsockets.js":"10","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/video/index.js":"11","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/video/selectors.js":"12","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/video/atoms.js":"13","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/components/videofeed.jsx":"14","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/slam/index.js":"15","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/slam/selectors.js":"16","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/slam/atoms.js":"17","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/components/feed.jsx":"18","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/components/camerapos.jsx":"19"},{"size":581,"mtime":1612056821621,"results":"20","hashOfConfig":"21"},{"size":1237,"mtime":1616214955074,"results":"22","hashOfConfig":"21"},{"size":362,"mtime":1611851068822,"results":"23","hashOfConfig":"24"},{"size":2191,"mtime":1616212144742,"results":"25","hashOfConfig":"21"},{"size":31,"mtime":1612054968878,"results":"26","hashOfConfig":"24"},{"size":53,"mtime":1612052472494,"results":"27","hashOfConfig":"21"},{"size":711,"mtime":1612321187157,"results":"28","hashOfConfig":"24"},{"size":228,"mtime":1612052441766,"results":"29","hashOfConfig":"21"},{"size":482,"mtime":1616214247927,"results":"30","hashOfConfig":"21"},{"size":3079,"mtime":1616255785443,"results":"31","hashOfConfig":"21"},{"size":53,"mtime":1612320795584,"results":"32","hashOfConfig":"21"},{"size":222,"mtime":1612322761666,"results":"33","hashOfConfig":"21"},{"size":382,"mtime":1616209403391,"results":"34","hashOfConfig":"21"},{"size":1187,"mtime":1616214711477,"results":"35","hashOfConfig":"21"},{"size":53,"mtime":1612498166267,"results":"36","hashOfConfig":"24"},{"size":0,"mtime":1612498150379,"results":"37","hashOfConfig":"24"},{"size":134,"mtime":1612499477423,"results":"38","hashOfConfig":"24"},{"size":412,"mtime":1616214807049,"results":"39","hashOfConfig":"21"},{"size":3120,"mtime":1616259425743,"results":"40","hashOfConfig":"21"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1goubt6",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"10jqpiy",{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"54"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"81"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92"},"/home/serhiy/github/jetracer-orbslam2/CarDriver/src/index.js",[],"/home/serhiy/github/jetracer-orbslam2/CarDriver/src/App.js",["93"],"import './App.css';\nimport { WsConnection } from './components/connection';\nimport React, {useState, useEffect} from \"react\";\nimport useWebsocket from \"./hooks/useWebsockets\";\nimport { Feed } from \"./components/feed\";\n\nfunction getWindowDimensions() {\n  const { innerWidth: width, innerHeight: height } = window;\n  return {\n      width,\n      height\n  };\n}\n\nconst App = () => {\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\n\n  useWebsocket();\n\n  function handleResize() {\n    // console.log(\"before resize\", getWindowDimensions());\n    setWindowDimensions(getWindowDimensions());\n    // console.log(\"after resize\", getWindowDimensions());\n  }\n\n  useEffect(() => {\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n  }, []);\n\n  return (\n    <div style={{position: 'relative'}}\n         className=\"container-fluid d-flex flex-column mx-0 px-0 min-vh-100 h-100 w-100\">\n          <Feed />        \n      <div style={{position: 'absolute', top:0, left: 0, zIndex:2}}\n           className=\"container-fluid d-flex flex-column min-vh-100 h-100 w-100\">\n        <WsConnection />        \n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/reportWebVitals.js",[],["94","95"],"/home/serhiy/github/jetracer-orbslam2/CarDriver/src/components/connection.jsx",["96","97"],"import React, { useState, useEffect } from 'react';\nimport { useRecoilState, useRecoilValue } from 'recoil';\nimport { connectionStateUrl, connectionStateIsConnected, connectionStateWs, showVideoState } from '../state/network'\n\nexport const WsConnection = () => {\n\n    const [connUrl, setConnUrl] = useRecoilState(connectionStateUrl);\n    const isConnected = useRecoilValue(connectionStateIsConnected);\n    const [ws, setWs] = useRecoilState(connectionStateWs);\n    const [showVideo, setShowVideo] = useRecoilState(showVideoState);\n\n    const handleUrlChange = (e) => {\n        setConnUrl(e.target.value);\n    };\n\n    const handleConnect = (e) => {\n\n        if(!isConnected) {\n            setWs(new WebSocket(connUrl));\n        } else {\n            ws.close();\n        };\n    };\n\n    const handleFeedSwitch = (e) => {\n        setShowVideo(!showVideo);\n    };\n\n    const handleSendTextMessage = (e) => {\n        ws.send('{\"message\": \"test message\"}');\n    };\n\n    return (\n        <div className=\"row justify-content-center align-items-end\">\n            <div className=\"col justify-content-center\">\n                <input type=\"text\" value={connUrl} onChange={handleUrlChange}>\n                </input>\n            </div>\n            <div className=\"col justify-content-center\">\n                <button onClick={handleConnect}\n                type=\"button\"\n                className={isConnected ? \"btn btn-warning\" : \"btn btn-success\"}> \n                    {isConnected ? \"Disconnect\" : \"Connect\"}\n                </button>\n            </div>\n            <div className=\"col justify-content-center\">\n                <button onClick={handleFeedSwitch}\n                disabled={!isConnected}\n                type=\"button\"\n                className={\"btn btn-success\"}> \n                    {showVideo ? \"Camera Pos\" : \"Video\"}\n                </button>\n            </div>\n            <div className=\"col justify-content-center\">\n                <button disabled={!isConnected} onClick={handleSendTextMessage}\n                type=\"button\"\n                className=\"btn btn-secondary\"> \n                    Send Text message\n                </button>\n            </div>\n        </div>\n    )\n}","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/message/index.js",[],["98","99"],"/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/network/index.js",[],"/home/serhiy/github/jetracer-orbslam2/CarDriver/src/message/parseMessage.js",["100"],"import BSON from 'bson';\nimport { useRecoilState } from 'recoil';\nimport { videoImage as VideoImage } from '../state/video'\n\nexport const useParseMessage = (message) => {\n\n    const [videoImage, setVideoImage] = useRecoilState(VideoImage);\n\n\n    try {\n        const reader = new FileReader()\n        reader.onload = function () {\n          const msgarray = new Uint8Array(this.result)\n          const msg = BSON.deserialize(msgarray)\n          setVideoImage(msg.data);\n          console.log(`Received message`);\n          console.log(msg.timestamp);\n          };\n\n        reader.readAsArrayBuffer(message.data);\n\n      }\n      catch (e) {\n        console.log(`Failed to deserialise websocket message`)\n      }\n}","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/network/selectors.js",["101","102"],"import { selectorFamily, selector } from \"recoil\";\nimport { connectionState } from \"./atoms\";\n\n\nexport const connectionConnectSelector = selector({\n    key: 'connection-connect',\n    set: ({set, get}, url) => {\n        \n    }\n})","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/network/atoms.js",["103"],"import { atomFamily, atom } from \"recoil\";\n\nexport const connectionStateIsConnected = atom({\n    key: 'connection-state-is-connected-atom',\n    default: false,\n});\n\nexport const connectionStateWs = atom({\n    key: 'connection-state-ws-atom',\n    default: null,\n});\n\nexport const connectionStateUrl = atom({\n    key: 'connection-state-url-atom',\n    default: 'ws://localhost:9002',\n});\n\nexport const showVideoState = atom({\n    key: 'show-video-state-atom',\n    default: false,\n});\n\n","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/hooks/useWebsockets.js",["104"],"import { useEffect } from 'react';\nimport { useRecoilState, useSetRecoilState } from 'recoil';\nimport { connectionStateIsConnected, connectionStateWs } from '../state/network'\nimport { videoImage, videoImageParams, cameraAngle } from '../state/video'\nimport BSON from 'bson';\n\nexport const useWebsocket = () => {\n\n    const setIsConnected = useSetRecoilState(connectionStateIsConnected);\n    const setVideoImageParams = useSetRecoilState(videoImageParams);\n    const setNewVideoImage = useSetRecoilState(videoImage);\n    const setNewAngle = useSetRecoilState(cameraAngle);\n    const [ws, setWs] = useRecoilState(connectionStateWs);\n\n    useEffect( () => {\n        if(ws) {\n            ws.binaryType = \"blob\";\n\n            ws.onopen = (e) => {\n                setIsConnected(true);\n                console.log(\"WebSocket is connected.\");\n            };\n\n            ws.onclose = (e) => {\n                setIsConnected(false);\n                console.log(\"WebSocket is disconnected.\");\n                setWs(null);\n            };\n\n            ws.onmessage = (message) => {\n                const reader = new FileReader()\n                reader.onload = function () {\n                    const msgarray = new Uint8Array(this.result)\n                    const msg = BSON.deserialize(msgarray)\n                    // console.log(`Received message`);\n                    // console.log(msg.timestamp);\n\n                    let imageParams = {};\n                    imageParams.height = msg.height;\n                    imageParams.width = msg.width;\n                    imageParams.channels = msg.channels;\n\n                    // console.log(\"image pixel:\", msg);\n                    if (msg.image && msg.keypoints_x && msg.keypoints_y)\n                    {\n                        setNewVideoImage({\n                            image: new Uint8Array(msg.image.buffer),\n                            x: Uint8Array.from(msg.keypoints_x.buffer),\n                            y: Uint8Array.from(msg.keypoints_y.buffer)\n                        });\n                        setVideoImageParams(imageParams);\n                        // setNewSlamKeyPoints({x: msg.keypoints_x.buffer, y: msg.keypoints_y.buffer})\n                    };\n                    // console.log(\"msg.ax && msg.ay && msg.az\", msg.ax, msg.ay, msg.az);\n                    if (msg.ax && msg.ay && msg.az)\n                    {\n                        setNewAngle({\n                            ax: msg.ax,\n                            ay: msg.ay,\n                            az: msg.az,\n                        });\n                    };\n                };\n                try {\n                    reader.readAsArrayBuffer(message.data);\n                }\n                catch (e) {\n                    // console.log(`Failed to deserialise websocket message`);\n                    console.log(e);\n                }\n            };\n\n            ws.onerror = (err) => {\n                console.error(\"WebSocket error observed:\", err);\n            };\n        };\n\n    },[ws]);\n\n    return null\n}\n\nexport default useWebsocket;","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/video/index.js",[],"/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/video/selectors.js",[],"/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/video/atoms.js",["105"],"import { atomFamily, atom } from \"recoil\";\n\nexport const videoImage = atom({\n    key: 'video-image-atom',\n    default: null,\n});\n\nexport const videoImageParams = atom({\n    key: 'video-image-params-atom',\n    default: {\n        height: 480,\n        width: 848,\n        channels: 1,\n    },\n});\n\nexport const cameraAngle = atom({\n    key: 'camera-angle-atom',\n    default: null,\n});\n\n","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/components/videofeed.jsx",["106","107","108","109","110"],"import React, { useEffect, useRef } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { videoImage, videoImageParams } from \"../state/video\";\nimport { connectionStateIsConnected } from '../state/network'\nimport * as THREE from \"three\";\n\nexport const VideoFeed = (props) => {\n\n    const currVideoImage = useRecoilValue(videoImage);\n    const currVideoImageParams = useRecoilValue(videoImageParams);\n    // const currSlamKeypoints = useRecoilValue(slamKeypoints);\n    const isConnected = useRecoilValue(connectionStateIsConnected);\n   \n    useEffect(() => {\n\n        if (isConnected){\n\n            let blob = new Blob([currVideoImage.image], {type: \"image/jpeg\"});\n            let urlCreator = window.URL || window.webkitURL;\n            let imageUrl = urlCreator.createObjectURL( blob );\n            let img = document.querySelector( \"#videoframe\" );\n            img.src = imageUrl;\n        \n        }\n    }, [currVideoImage]);\n\n\n    return (\n        <div>\n            <img style={{resizeMode: 'contain'}} \n            id=\"videoframe\" \n            className=\"container-fluid d-flex flex-column mx-0 px-0 min-vh-100 h-100 w-100\"\n            {...props} />\n        </div>\n    )\n}","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/slam/index.js",[],["111","112"],"/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/slam/selectors.js",[],"/home/serhiy/github/jetracer-orbslam2/CarDriver/src/state/slam/atoms.js",["113"],"import { atomFamily, atom } from \"recoil\";\n\nexport const slamKeypoints = atom({\n    key: 'slam-keypoints-atom',\n    default: {},\n});\n\n","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/components/feed.jsx",["114","115"],"import React, { useEffect, useRef } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { showVideoState } from '../state/network'\nimport {VideoFeed} from './videofeed'\nimport {CameraPos} from './camerapos'\n\nexport const Feed = (props) => {\n\n    const showVideo = useRecoilValue(showVideoState);\n\n    return (\n        <div>\n            {showVideo ? <VideoFeed /> : <CameraPos />}\n        </div>\n    )\n}","/home/serhiy/github/jetracer-orbslam2/CarDriver/src/components/camerapos.jsx",["116","117","118","119","120","121","122","123","124"],"import React, { useEffect, useState } from 'react';\nimport { useRecoilValue } from 'recoil';\nimport { cameraAngle } from \"../state/video\";\nimport * as THREE from \"three\";\n\nexport const CameraPos = (props) => {\n\n    const currCameraAngle = useRecoilValue(cameraAngle);\n    // const currSlamKeypoints = useRecoilValue(slamKeypoints);\n    const cnvsRef = React.useRef(null);\n\n    const [scene, setScene] = useState(new THREE.Scene());\n    // const light = new THREE.DirectionalLight();\n    // const camera = new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 );\n    // light.position.set(0,0,1);\n    // scene.add(light);\n    const [camera, setCamera] = useState(new THREE.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 0.1, 1000 ));\n    const [light, setLight] = useState(new THREE.DirectionalLight());\n    const [renderer, setRenderer] = useState();\n    const pyramidGeom = new THREE.ConeGeometry(5, 1, 4)\n    // const material = new THREE.MeshBasicMaterial( {color: 0xffff00} );\n    const [pyramid, setPiramid] = useState(new THREE.Group());\n    const [prevAngles, setPrevAngles] = useState({ax: 0, ay:0, az:0});\n\n\n    useEffect(() => {\n        let tmp_renderer = new THREE.WebGLRenderer({\n            canvas: cnvsRef.current,\n            antialias: true\n        });\n        camera.position.z = 10;\n        tmp_renderer.setSize( window.innerWidth, window.innerHeight );\n        setRenderer(tmp_renderer);\n        light.position.set(0,0,1);\n        scene.add(light);\n        const lineMaterial = new THREE.LineBasicMaterial( { color: 0xffffff, transparent: true, opacity: 0.5 } );\n        const meshMaterial = new THREE.MeshPhongMaterial( { color: 0x156289, emissive: 0x072534, side: THREE.DoubleSide, flatShading: true } );\n        pyramid.add(new THREE.LineSegments( pyramidGeom, lineMaterial ));\n        pyramid.add(new THREE.Mesh( pyramidGeom, meshMaterial ));\n        scene.add(pyramid);\n\n        console.log(\"pyramidGeom\", pyramidGeom);\n        console.log(\"pyramid\", pyramid);\n\n        let animate = function () {\n            requestAnimationFrame( animate );\n            tmp_renderer.render( scene, camera );\n        };\n        animate();      \n\n    }, []);\n    \n    useEffect(() => {\n        // console.log(\"currCameraAngle\", currCameraAngle, \"pyramid\", pyramid);\n        if (currCameraAngle && pyramid)\n        {\n            // const eu = new THREE.Euler( currCameraAngle.ax * 180 / Math.PI,\n            //     currCameraAngle.ay * 180 / Math.PI,\n            //     currCameraAngle.az * 180 / Math.PI,\n            //     'XYZ' );\n            const eu = new THREE.Euler( currCameraAngle.ax * Math.PI / 180,\n                currCameraAngle.ay * Math.PI / 180,\n                (currCameraAngle.az + 90) * Math.PI / 180,\n                'XYZ' );\n            pyramid.setRotationFromEuler(eu);\n            console.log(\"Euler\", eu, \"currCameraAngle\", currCameraAngle);\n            // setPrevAngles(currCameraAngle);\n        }\n    }, [currCameraAngle]);\n\n    return (\n        <div>\n            <canvas ref={cnvsRef} width=\"848\" height=\"480\" id=\"cnvs\" />\n        </div>\n    )\n}",{"ruleId":"125","severity":1,"message":"126","line":16,"column":10,"nodeType":"127","messageId":"128","endLine":16,"endColumn":26},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"125","severity":1,"message":"133","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":25},{"ruleId":"125","severity":1,"message":"134","line":1,"column":27,"nodeType":"127","messageId":"128","endLine":1,"endColumn":36},{"ruleId":"129","replacedBy":"135"},{"ruleId":"131","replacedBy":"136"},{"ruleId":"125","severity":1,"message":"137","line":7,"column":12,"nodeType":"127","messageId":"128","endLine":7,"endColumn":22},{"ruleId":"125","severity":1,"message":"138","line":1,"column":10,"nodeType":"127","messageId":"128","endLine":1,"endColumn":24},{"ruleId":"125","severity":1,"message":"139","line":2,"column":10,"nodeType":"127","messageId":"128","endLine":2,"endColumn":25},{"ruleId":"125","severity":1,"message":"140","line":1,"column":10,"nodeType":"127","messageId":"128","endLine":1,"endColumn":20},{"ruleId":"141","severity":1,"message":"142","line":78,"column":7,"nodeType":"143","endLine":78,"endColumn":11,"suggestions":"144"},{"ruleId":"125","severity":1,"message":"140","line":1,"column":10,"nodeType":"127","messageId":"128","endLine":1,"endColumn":20},{"ruleId":"125","severity":1,"message":"145","line":1,"column":28,"nodeType":"127","messageId":"128","endLine":1,"endColumn":34},{"ruleId":"125","severity":1,"message":"146","line":5,"column":13,"nodeType":"127","messageId":"128","endLine":5,"endColumn":18},{"ruleId":"125","severity":1,"message":"147","line":10,"column":11,"nodeType":"127","messageId":"128","endLine":10,"endColumn":31},{"ruleId":"141","severity":1,"message":"148","line":25,"column":8,"nodeType":"143","endLine":25,"endColumn":24,"suggestions":"149"},{"ruleId":"150","severity":1,"message":"151","line":30,"column":13,"nodeType":"152","endLine":33,"endColumn":26},{"ruleId":"129","replacedBy":"153"},{"ruleId":"131","replacedBy":"154"},{"ruleId":"125","severity":1,"message":"140","line":1,"column":10,"nodeType":"127","messageId":"128","endLine":1,"endColumn":20},{"ruleId":"125","severity":1,"message":"134","line":1,"column":17,"nodeType":"127","messageId":"128","endLine":1,"endColumn":26},{"ruleId":"125","severity":1,"message":"145","line":1,"column":28,"nodeType":"127","messageId":"128","endLine":1,"endColumn":34},{"ruleId":"125","severity":1,"message":"155","line":12,"column":19,"nodeType":"127","messageId":"128","endLine":12,"endColumn":27},{"ruleId":"125","severity":1,"message":"156","line":17,"column":20,"nodeType":"127","messageId":"128","endLine":17,"endColumn":29},{"ruleId":"125","severity":1,"message":"157","line":18,"column":19,"nodeType":"127","messageId":"128","endLine":18,"endColumn":27},{"ruleId":"125","severity":1,"message":"158","line":19,"column":12,"nodeType":"127","messageId":"128","endLine":19,"endColumn":20},{"ruleId":"125","severity":1,"message":"159","line":22,"column":21,"nodeType":"127","messageId":"128","endLine":22,"endColumn":31},{"ruleId":"125","severity":1,"message":"160","line":23,"column":12,"nodeType":"127","messageId":"128","endLine":23,"endColumn":22},{"ruleId":"125","severity":1,"message":"161","line":23,"column":24,"nodeType":"127","messageId":"128","endLine":23,"endColumn":37},{"ruleId":"141","severity":1,"message":"162","line":51,"column":8,"nodeType":"143","endLine":51,"endColumn":10,"suggestions":"163"},{"ruleId":"141","severity":1,"message":"164","line":69,"column":8,"nodeType":"143","endLine":69,"endColumn":25,"suggestions":"165"},"no-unused-vars","'windowDimensions' is assigned a value but never used.","Identifier","unusedVar","no-native-reassign",["166"],"no-negated-in-lhs",["167"],"'useState' is defined but never used.","'useEffect' is defined but never used.",["166"],["167"],"'videoImage' is assigned a value but never used.","'selectorFamily' is defined but never used.","'connectionState' is defined but never used.","'atomFamily' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setIsConnected', 'setNewAngle', 'setNewVideoImage', 'setVideoImageParams', and 'setWs'. Either include them or remove the dependency array.","ArrayExpression",["168"],"'useRef' is defined but never used.","'THREE' is defined but never used.","'currVideoImageParams' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'isConnected'. Either include it or remove the dependency array.",["169"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["166"],["167"],"'setScene' is assigned a value but never used.","'setCamera' is assigned a value but never used.","'setLight' is assigned a value but never used.","'renderer' is assigned a value but never used.","'setPiramid' is assigned a value but never used.","'prevAngles' is assigned a value but never used.","'setPrevAngles' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'camera', 'light', 'pyramid', 'pyramidGeom', and 'scene'. Either include them or remove the dependency array.",["170"],"React Hook useEffect has a missing dependency: 'pyramid'. Either include it or remove the dependency array.",["171"],"no-global-assign","no-unsafe-negation",{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},{"desc":"176","fix":"177"},{"desc":"178","fix":"179"},"Update the dependencies array to be: [setIsConnected, setNewAngle, setNewVideoImage, setVideoImageParams, setWs, ws]",{"range":"180","text":"181"},"Update the dependencies array to be: [currVideoImage, isConnected]",{"range":"182","text":"183"},"Update the dependencies array to be: [camera, light, pyramid, pyramidGeom, scene]",{"range":"184","text":"185"},"Update the dependencies array to be: [currCameraAngle, pyramid]",{"range":"186","text":"187"},[3024,3028],"[setIsConnected, setNewAngle, setNewVideoImage, setVideoImageParams, setWs, ws]",[920,936],"[currVideoImage, isConnected]",[2203,2205],"[camera, light, pyramid, pyramidGeom, scene]",[2978,2995],"[currCameraAngle, pyramid]"]